/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.1.58
 * apidoc:0.11.37 http://www.apidoc.me/flow/reference/0.1.58/play_2_4_client
 */
package io.flow.reference.v0.models {

  /**
   * ISO 3166 country codes. Note Flow APIs will accept either the 2 or 3 character
   * country code, but internally we normalize data and store as the 3 character,
   * upper case ISO code. See https://api.flow.io/reference/countries
   */
  case class Country(
    name: String,
    iso31662: String,
    iso31663: String,
    languages: Seq[String],
    measurementSystem: String,
    defaultCurrency: _root_.scala.Option[String] = None,
    timezones: Seq[String]
  )

  /**
   * ISO 4217 3-character currency code. See https://api.flow.io/reference/currencies
   */
  case class Currency(
    name: String,
    iso42173: String,
    numberDecimals: Int
  )

  /**
   * ISO 639 2-character language code. See https://api.flow.io/reference/languages
   */
  case class Language(
    name: String,
    iso6392: String
  )

  /**
   * A region represents a geographic area of the world. Regions can be countries,
   * continents or other political areas (like the Eurozone). See
   * https://api.flow.io/reference/regions
   */
  case class Region(
    id: String,
    name: String,
    countries: Seq[String],
    currencies: Seq[String],
    languages: Seq[String],
    measurementSystems: Seq[String],
    timezones: Seq[String]
  )

  /**
   * Time zone data is provided by the public IANA time zone database. See
   * http://www.iana.org/time-zones
   */
  case class Timezone(
    name: String,
    description: String,
    offset: Int
  )

}

package io.flow.reference.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.reference.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit def jsonReadsReferenceCountry: play.api.libs.json.Reads[Country] = {
      (
        (__ \ "name").read[String] and
        (__ \ "iso_3166_2").read[String] and
        (__ \ "iso_3166_3").read[String] and
        (__ \ "languages").read[Seq[String]] and
        (__ \ "measurement_system").read[String] and
        (__ \ "default_currency").readNullable[String] and
        (__ \ "timezones").read[Seq[String]]
      )(Country.apply _)
    }

    def jsObjectCountry(obj: io.flow.reference.v0.models.Country) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "iso_3166_2" -> play.api.libs.json.JsString(obj.iso31662),
        "iso_3166_3" -> play.api.libs.json.JsString(obj.iso31663),
        "languages" -> play.api.libs.json.Json.toJson(obj.languages),
        "measurement_system" -> play.api.libs.json.JsString(obj.measurementSystem),
        "timezones" -> play.api.libs.json.Json.toJson(obj.timezones)
      ) ++ (obj.defaultCurrency match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("default_currency" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesReferenceCountry: play.api.libs.json.Writes[Country] = {
      new play.api.libs.json.Writes[io.flow.reference.v0.models.Country] {
        def writes(obj: io.flow.reference.v0.models.Country) = {
          jsObjectCountry(obj)
        }
      }
    }

    implicit def jsonReadsReferenceCurrency: play.api.libs.json.Reads[Currency] = {
      (
        (__ \ "name").read[String] and
        (__ \ "iso_4217_3").read[String] and
        (__ \ "number_decimals").read[Int]
      )(Currency.apply _)
    }

    def jsObjectCurrency(obj: io.flow.reference.v0.models.Currency) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "iso_4217_3" -> play.api.libs.json.JsString(obj.iso42173),
        "number_decimals" -> play.api.libs.json.JsNumber(obj.numberDecimals)
      )
    }

    implicit def jsonWritesReferenceCurrency: play.api.libs.json.Writes[Currency] = {
      new play.api.libs.json.Writes[io.flow.reference.v0.models.Currency] {
        def writes(obj: io.flow.reference.v0.models.Currency) = {
          jsObjectCurrency(obj)
        }
      }
    }

    implicit def jsonReadsReferenceLanguage: play.api.libs.json.Reads[Language] = {
      (
        (__ \ "name").read[String] and
        (__ \ "iso_639_2").read[String]
      )(Language.apply _)
    }

    def jsObjectLanguage(obj: io.flow.reference.v0.models.Language) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "iso_639_2" -> play.api.libs.json.JsString(obj.iso6392)
      )
    }

    implicit def jsonWritesReferenceLanguage: play.api.libs.json.Writes[Language] = {
      new play.api.libs.json.Writes[io.flow.reference.v0.models.Language] {
        def writes(obj: io.flow.reference.v0.models.Language) = {
          jsObjectLanguage(obj)
        }
      }
    }

    implicit def jsonReadsReferenceRegion: play.api.libs.json.Reads[Region] = {
      (
        (__ \ "id").read[String] and
        (__ \ "name").read[String] and
        (__ \ "countries").read[Seq[String]] and
        (__ \ "currencies").read[Seq[String]] and
        (__ \ "languages").read[Seq[String]] and
        (__ \ "measurement_systems").read[Seq[String]] and
        (__ \ "timezones").read[Seq[String]]
      )(Region.apply _)
    }

    def jsObjectRegion(obj: io.flow.reference.v0.models.Region) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "name" -> play.api.libs.json.JsString(obj.name),
        "countries" -> play.api.libs.json.Json.toJson(obj.countries),
        "currencies" -> play.api.libs.json.Json.toJson(obj.currencies),
        "languages" -> play.api.libs.json.Json.toJson(obj.languages),
        "measurement_systems" -> play.api.libs.json.Json.toJson(obj.measurementSystems),
        "timezones" -> play.api.libs.json.Json.toJson(obj.timezones)
      )
    }

    implicit def jsonWritesReferenceRegion: play.api.libs.json.Writes[Region] = {
      new play.api.libs.json.Writes[io.flow.reference.v0.models.Region] {
        def writes(obj: io.flow.reference.v0.models.Region) = {
          jsObjectRegion(obj)
        }
      }
    }

    implicit def jsonReadsReferenceTimezone: play.api.libs.json.Reads[Timezone] = {
      (
        (__ \ "name").read[String] and
        (__ \ "description").read[String] and
        (__ \ "offset").read[Int]
      )(Timezone.apply _)
    }

    def jsObjectTimezone(obj: io.flow.reference.v0.models.Timezone) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "description" -> play.api.libs.json.JsString(obj.description),
        "offset" -> play.api.libs.json.JsNumber(obj.offset)
      )
    }

    implicit def jsonWritesReferenceTimezone: play.api.libs.json.Writes[Timezone] = {
      new play.api.libs.json.Writes[io.flow.reference.v0.models.Timezone] {
        def writes(obj: io.flow.reference.v0.models.Timezone) = {
          jsObjectTimezone(obj)
        }
      }
    }
  }
}

package io.flow.reference.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.flow.reference.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )



  }

}


package io.flow.reference.v0 {

  object Constants {

    val BaseUrl = "https://api.flow.io/reference"
    val Namespace = "io.flow.reference.v0"
    val UserAgent = "apidoc:0.11.37 http://www.apidoc.me/flow/reference/0.1.58/play_2_4_client"
    val Version = "0.1.58"
    val VersionMajor = 0

  }

  class Client(
    val baseUrl: String = "https://api.flow.io/reference",
    auth: scala.Option[io.flow.reference.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.reference.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.reference.v0.Client")

    logger.info(s"Initializing io.flow.reference.v0.Client for url $baseUrl")

    def countries: Countries = Countries

    def currencies: Currencies = Currencies

    def languages: Languages = Languages

    def regions: Regions = Regions

    def timezones: Timezones = Timezones

    object Countries extends Countries {
      override def get(
        q: _root_.scala.Option[String] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.reference.v0.models.Country]] = {
        val queryParameters = Seq(
          q.map("q" -> _)
        ).flatten

        _executeRequest("GET", s"/reference/countries", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.reference.v0.Client.parseJson("Seq[io.flow.reference.v0.models.Country]", r, _.validate[Seq[io.flow.reference.v0.models.Country]])
          case r if r.status == 401 => throw new io.flow.reference.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.reference.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    object Currencies extends Currencies {
      override def get(
        q: _root_.scala.Option[String] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.reference.v0.models.Currency]] = {
        val queryParameters = Seq(
          q.map("q" -> _)
        ).flatten

        _executeRequest("GET", s"/reference/currencies", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.reference.v0.Client.parseJson("Seq[io.flow.reference.v0.models.Currency]", r, _.validate[Seq[io.flow.reference.v0.models.Currency]])
          case r if r.status == 401 => throw new io.flow.reference.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.reference.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    object Languages extends Languages {
      override def get(
        q: _root_.scala.Option[String] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.reference.v0.models.Language]] = {
        val queryParameters = Seq(
          q.map("q" -> _)
        ).flatten

        _executeRequest("GET", s"/reference/languages", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.reference.v0.Client.parseJson("Seq[io.flow.reference.v0.models.Language]", r, _.validate[Seq[io.flow.reference.v0.models.Language]])
          case r if r.status == 401 => throw new io.flow.reference.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.reference.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    object Regions extends Regions {
      override def get(
        q: _root_.scala.Option[String] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.reference.v0.models.Region]] = {
        val queryParameters = Seq(
          q.map("q" -> _)
        ).flatten

        _executeRequest("GET", s"/reference/regions", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.reference.v0.Client.parseJson("Seq[io.flow.reference.v0.models.Region]", r, _.validate[Seq[io.flow.reference.v0.models.Region]])
          case r if r.status == 401 => throw new io.flow.reference.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.reference.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.reference.v0.models.Region] = {
        _executeRequest("GET", s"/reference/regions/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.reference.v0.Client.parseJson("io.flow.reference.v0.models.Region", r, _.validate[io.flow.reference.v0.models.Region])
          case r if r.status == 401 => throw new io.flow.reference.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.reference.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.reference.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }
    }

    object Timezones extends Timezones {
      override def get(
        q: _root_.scala.Option[String] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.reference.v0.models.Timezone]] = {
        val queryParameters = Seq(
          q.map("q" -> _)
        ).flatten

        _executeRequest("GET", s"/reference/timezones", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.reference.v0.Client.parseJson("Seq[io.flow.reference.v0.models.Timezone]", r, _.validate[Seq[io.flow.reference.v0.models.Timezone]])
          case r if r.status == 401 => throw new io.flow.reference.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.reference.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(baseUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new io.flow.reference.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def countries: io.flow.reference.v0.Countries
      def currencies: io.flow.reference.v0.Currencies
      def languages: io.flow.reference.v0.Languages
      def regions: io.flow.reference.v0.Regions
      def timezones: io.flow.reference.v0.Timezones
    }

  }

  trait Countries {
    /**
     * Returns a list of countries.
     */
    def get(
      q: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.reference.v0.models.Country]]
  }

  trait Currencies {
    /**
     * Returns a list of currencies.
     */
    def get(
      q: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.reference.v0.models.Currency]]
  }

  trait Languages {
    /**
     * Returns a list of languages.
     */
    def get(
      q: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.reference.v0.models.Language]]
  }

  trait Regions {
    /**
     * Returns a list of regions.
     */
    def get(
      q: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.reference.v0.models.Region]]

    /**
     * Returns the region with the specifed id.
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.reference.v0.models.Region]
  }

  trait Timezones {
    /**
     * Returns a list of timezones.
     */
    def get(
      q: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.reference.v0.models.Timezone]]
  }

  package errors {

    import io.flow.reference.v0.models.json._

    case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}