/**
  * Generated by API Builder - https://www.apibuilder.io
  * Service version: 0.8.35
  * apibuilder 0.14.93 app.apibuilder.io/flow/location/latest/play_2_6_controllers
  */
package io.flow.location.v0.controllers

import io.flow.location.v0.models.json._
import io.flow.common.v0.models.json._
import io.flow.reference.v0.models.json._

trait CountryDefaultsController extends play.api.mvc.BaseController {

  sealed trait Get extends Product with Serializable
  object Get {
    case class HTTP200(body: Seq[io.flow.location.v0.models.CountryDefaults]) extends Get
    case object HTTP401 extends Get
    case object HTTP404 extends Get
    case class HTTP422(body: io.flow.location.v0.models.LocationError) extends Get
    case class Undocumented(result: play.api.mvc.Result) extends Get
  }

  def get(
      request: play.api.mvc.Request[play.api.mvc.AnyContent],
      country: _root_.scala.Option[String],
      ip: _root_.scala.Option[String]
  ): scala.concurrent.Future[Get]
  final def get(country: _root_.scala.Option[String], ip: _root_.scala.Option[String]): play.api.mvc.Handler =
    Action.async { request =>
      get(request, country, ip)
        .map {
          case Get.HTTP200(body)        => Status(200)(play.api.libs.json.Json.toJson(body))
          case Get.HTTP401              => Status(401)(play.api.mvc.Results.EmptyContent())
          case Get.HTTP404              => Status(404)(play.api.mvc.Results.EmptyContent())
          case Get.HTTP422(body)        => Status(422)(play.api.libs.json.Json.toJson(body))
          case Get.Undocumented(result) => result
        }(defaultExecutionContext)
    }

  sealed trait GetByCountry extends Product with Serializable
  object GetByCountry {
    case class HTTP200(body: io.flow.location.v0.models.CountryDefaults) extends GetByCountry
    case object HTTP401 extends GetByCountry
    case object HTTP404 extends GetByCountry
    case class Undocumented(result: play.api.mvc.Result) extends GetByCountry
  }

  def getByCountry(
      request: play.api.mvc.Request[play.api.mvc.AnyContent],
      country: String
  ): scala.concurrent.Future[GetByCountry]
  final def getByCountry(country: String): play.api.mvc.Handler = Action.async { request =>
    getByCountry(request, country)
      .map {
        case GetByCountry.HTTP200(body)        => Status(200)(play.api.libs.json.Json.toJson(body))
        case GetByCountry.HTTP401              => Status(401)(play.api.mvc.Results.EmptyContent())
        case GetByCountry.HTTP404              => Status(404)(play.api.mvc.Results.EmptyContent())
        case GetByCountry.Undocumented(result) => result
      }(defaultExecutionContext)
  }

}

trait AddressesController extends play.api.mvc.BaseController {

  sealed trait Get extends Product with Serializable
  object Get {
    case class HTTP200(body: Seq[io.flow.common.v0.models.Address]) extends Get
    case object HTTP401 extends Get
    case object HTTP404 extends Get
    case class HTTP422(body: io.flow.location.v0.models.LocationError) extends Get
    case class Undocumented(result: play.api.mvc.Result) extends Get
  }

  def get(
      request: play.api.mvc.Request[play.api.mvc.AnyContent],
      address: _root_.scala.Option[String],
      ip: _root_.scala.Option[String]
  ): scala.concurrent.Future[Get]
  final def get(address: _root_.scala.Option[String], ip: _root_.scala.Option[String]): play.api.mvc.Handler =
    Action.async { request =>
      get(request, address, ip)
        .map {
          case Get.HTTP200(body)        => Status(200)(play.api.libs.json.Json.toJson(body))
          case Get.HTTP401              => Status(401)(play.api.mvc.Results.EmptyContent())
          case Get.HTTP404              => Status(404)(play.api.mvc.Results.EmptyContent())
          case Get.HTTP422(body)        => Status(422)(play.api.libs.json.Json.toJson(body))
          case Get.Undocumented(result) => result
        }(defaultExecutionContext)
    }

  sealed trait PostVerifications extends Product with Serializable
  object PostVerifications {
    case class HTTP200(body: io.flow.location.v0.models.AddressVerification) extends PostVerifications
    case object HTTP401 extends PostVerifications
    case class HTTP422(body: io.flow.location.v0.models.LocationError) extends PostVerifications
    case class Undocumented(result: play.api.mvc.Result) extends PostVerifications
  }

  def postVerifications(
      request: play.api.mvc.Request[io.flow.common.v0.models.Address],
      body: io.flow.common.v0.models.Address
  ): scala.concurrent.Future[PostVerifications]
  final def postVerifications(): play.api.mvc.Handler = Action.async(parse.json[io.flow.common.v0.models.Address]) {
    request =>
      postVerifications(request, request.body)
        .map {
          case PostVerifications.HTTP200(body)        => Status(200)(play.api.libs.json.Json.toJson(body))
          case PostVerifications.HTTP401              => Status(401)(play.api.mvc.Results.EmptyContent())
          case PostVerifications.HTTP422(body)        => Status(422)(play.api.libs.json.Json.toJson(body))
          case PostVerifications.Undocumented(result) => result
        }(defaultExecutionContext)
  }

}

trait TimezonesController extends play.api.mvc.BaseController {

  sealed trait Get extends Product with Serializable
  object Get {
    case class HTTP200(body: Seq[io.flow.reference.v0.models.Timezone]) extends Get
    case object HTTP401 extends Get
    case object HTTP404 extends Get
    case class HTTP422(body: io.flow.location.v0.models.LocationError) extends Get
    case class Undocumented(result: play.api.mvc.Result) extends Get
  }

  def get(
      request: play.api.mvc.Request[play.api.mvc.AnyContent],
      ip: _root_.scala.Option[String]
  ): scala.concurrent.Future[Get]
  final def get(ip: _root_.scala.Option[String]): play.api.mvc.Handler = Action.async { request =>
    get(request, ip)
      .map {
        case Get.HTTP200(body)        => Status(200)(play.api.libs.json.Json.toJson(body))
        case Get.HTTP401              => Status(401)(play.api.mvc.Results.EmptyContent())
        case Get.HTTP404              => Status(404)(play.api.mvc.Results.EmptyContent())
        case Get.HTTP422(body)        => Status(422)(play.api.libs.json.Json.toJson(body))
        case Get.Undocumented(result) => result
      }(defaultExecutionContext)
  }

}
