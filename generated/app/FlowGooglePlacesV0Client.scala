/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.2.42
 * apibuilder 0.15.33 app.apibuilder.io/flow/google-places/latest/play_2_8_client
 */
package io.flow.google.places.v0.models {

  sealed trait AddressComponentType extends _root_.scala.Product with _root_.scala.Serializable

  object AddressComponentType {

    case object AdministrativeAreaLevel1 extends AddressComponentType {
      override def toString = "administrative_area_level_1"
    }
    case object AdministrativeAreaLevel2 extends AddressComponentType {
      override def toString = "administrative_area_level_2"
    }
    case object AdministrativeAreaLevel3 extends AddressComponentType {
      override def toString = "administrative_area_level_3"
    }
    case object AdministrativeAreaLevel4 extends AddressComponentType {
      override def toString = "administrative_area_level_4"
    }
    case object AdministrativeAreaLevel5 extends AddressComponentType {
      override def toString = "administrative_area_level_5"
    }
    case object Airport extends AddressComponentType { override def toString = "airport" }
    case object BusStation extends AddressComponentType { override def toString = "bus_station" }
    case object ColloquialArea extends AddressComponentType { override def toString = "colloquial_area" }
    case object Country extends AddressComponentType { override def toString = "country" }
    case object Establishment extends AddressComponentType { override def toString = "establishment" }
    case object Floor extends AddressComponentType { override def toString = "floor" }
    case object Intersection extends AddressComponentType { override def toString = "intersection" }
    case object Locality extends AddressComponentType { override def toString = "locality" }
    case object NaturalFeature extends AddressComponentType { override def toString = "natural_feature" }
    case object Neighborhood extends AddressComponentType { override def toString = "neighborhood" }
    case object Park extends AddressComponentType { override def toString = "park" }
    case object Parking extends AddressComponentType { override def toString = "parking" }
    case object PointOfInterest extends AddressComponentType { override def toString = "point_of_interest" }
    case object Political extends AddressComponentType { override def toString = "political" }
    case object PostBox extends AddressComponentType { override def toString = "post_box" }
    case object PostalCode extends AddressComponentType { override def toString = "postal_code" }
    case object PostalCodePrefix extends AddressComponentType { override def toString = "postal_code_prefix" }
    case object PostalCodeSuffix extends AddressComponentType { override def toString = "postal_code_suffix" }
    case object PostalTown extends AddressComponentType { override def toString = "postal_town" }
    case object Premise extends AddressComponentType { override def toString = "premise" }
    case object Room extends AddressComponentType { override def toString = "room" }
    case object Route extends AddressComponentType { override def toString = "route" }
    case object StreetAddress extends AddressComponentType { override def toString = "street_address" }
    case object StreetNumber extends AddressComponentType { override def toString = "street_number" }
    case object Sublocality extends AddressComponentType { override def toString = "sublocality" }
    case object SublocalityLevel1 extends AddressComponentType { override def toString = "sublocality_level_1" }
    case object SublocalityLevel2 extends AddressComponentType { override def toString = "sublocality_level_2" }
    case object SublocalityLevel3 extends AddressComponentType { override def toString = "sublocality_level_3" }
    case object SublocalityLevel4 extends AddressComponentType { override def toString = "sublocality_level_4" }
    case object SublocalityLevel5 extends AddressComponentType { override def toString = "sublocality_level_5" }
    case object Subpremise extends AddressComponentType { override def toString = "subpremise" }
    case object TrainStation extends AddressComponentType { override def toString = "train_station" }
    case object TransitStation extends AddressComponentType { override def toString = "transit_station" }
    case object Unknown extends AddressComponentType { override def toString = "unknown" }
    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends AddressComponentType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[AddressComponentType] = scala.List(AdministrativeAreaLevel1, AdministrativeAreaLevel2, AdministrativeAreaLevel3, AdministrativeAreaLevel4, AdministrativeAreaLevel5, Airport, BusStation, ColloquialArea, Country, Establishment, Floor, Intersection, Locality, NaturalFeature, Neighborhood, Park, Parking, PointOfInterest, Political, PostBox, PostalCode, PostalCodePrefix, PostalCodeSuffix, PostalTown, Premise, Room, Route, StreetAddress, StreetNumber, Sublocality, SublocalityLevel1, SublocalityLevel2, SublocalityLevel3, SublocalityLevel4, SublocalityLevel5, Subpremise, TrainStation, TransitStation, Unknown)

    private[this]
    val byName: Map[String, AddressComponentType] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): AddressComponentType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[AddressComponentType] = byName.get(value.toLowerCase)

  }

}

package io.flow.google.places.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.google.places.v0.models.json._

    private[v0] implicit val jsonReadsUUID: play.api.libs.json.Reads[_root_.java.util.UUID] = __.read[String].map { str =>
      _root_.java.util.UUID.fromString(str)
    }

    private[v0] implicit val jsonWritesUUID: play.api.libs.json.Writes[_root_.java.util.UUID] = (x: _root_.java.util.UUID) => play.api.libs.json.JsString(x.toString)

    private[v0] implicit val jsonReadsJodaDateTime: play.api.libs.json.Reads[_root_.org.joda.time.DateTime] = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime: play.api.libs.json.Writes[_root_.org.joda.time.DateTime] = (x: _root_.org.joda.time.DateTime) => {
      play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x))
    }

    private[v0] implicit val jsonReadsJodaLocalDate: play.api.libs.json.Reads[_root_.org.joda.time.LocalDate] = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate: play.api.libs.json.Writes[_root_.org.joda.time.LocalDate] = (x: _root_.org.joda.time.LocalDate) => {
      play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.date.print(x))
    }

    implicit val jsonReadsGooglePlacesAddressComponentType: play.api.libs.json.Reads[io.flow.google.places.v0.models.AddressComponentType] = new play.api.libs.json.Reads[io.flow.google.places.v0.models.AddressComponentType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.google.places.v0.models.AddressComponentType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.google.places.v0.models.AddressComponentType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.google.places.v0.models.AddressComponentType(v))
              case err: play.api.libs.json.JsError =>
                (js \ "address_component_type").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.google.places.v0.models.AddressComponentType(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesGooglePlacesAddressComponentType(obj: io.flow.google.places.v0.models.AddressComponentType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectAddressComponentType(obj: io.flow.google.places.v0.models.AddressComponentType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesGooglePlacesAddressComponentType: play.api.libs.json.Writes[AddressComponentType] = {
      (obj: io.flow.google.places.v0.models.AddressComponentType) => {
        jsonWritesGooglePlacesAddressComponentType(obj)
      }
    }
  }
}

package io.flow.google.places.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._
    import Models._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    object Models {
      import io.flow.google.places.v0.models._

      val addressComponentTypeConverter: ApibuilderTypeConverter[io.flow.google.places.v0.models.AddressComponentType] = new ApibuilderTypeConverter[io.flow.google.places.v0.models.AddressComponentType] {
        override def convert(value: String): io.flow.google.places.v0.models.AddressComponentType = io.flow.google.places.v0.models.AddressComponentType(value)
        override def convert(value: io.flow.google.places.v0.models.AddressComponentType): String = value.toString
        override def example: io.flow.google.places.v0.models.AddressComponentType = io.flow.google.places.v0.models.AddressComponentType.AdministrativeAreaLevel1
        override def validValues: Seq[io.flow.google.places.v0.models.AddressComponentType] = io.flow.google.places.v0.models.AddressComponentType.all
      }
      implicit def pathBindableAddressComponentType(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.google.places.v0.models.AddressComponentType] = ApibuilderPathBindable(addressComponentTypeConverter)
      implicit def queryStringBindableAddressComponentType(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.google.places.v0.models.AddressComponentType] = ApibuilderQueryStringBindable(addressComponentTypeConverter)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      val dateTimeIso8601: ApibuilderTypeConverter[_root_.org.joda.time.DateTime] = new ApibuilderTypeConverter[_root_.org.joda.time.DateTime] {
        override def convert(value: String): _root_.org.joda.time.DateTime = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: _root_.org.joda.time.DateTime): String = _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(value)
        override def example: _root_.org.joda.time.DateTime = _root_.org.joda.time.DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] = new ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] {
        override def convert(value: String): _root_.org.joda.time.LocalDate = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(value)
        override def convert(value: _root_.org.joda.time.LocalDate): String = _root_.org.joda.time.format.ISODateTimeFormat.date.print(value)
        override def example: _root_.org.joda.time.LocalDate = _root_.org.joda.time.LocalDate.now
      }
    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}


package io.flow.google.places.v0 {

  object Constants {

    val Namespace = "io.flow.google.places.v0"
    val UserAgent = "apibuilder 0.15.33 app.apibuilder.io/flow/google-places/latest/play_2_8_client"
    val Version = "0.2.42"
    val VersionMajor = 0

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String,
    auth: scala.Option[io.flow.google.places.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.google.places.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.google.places.v0.Client")

    logger.info(s"Initializing io.flow.google.places.v0.Client for url $baseUrl")





    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {

      val holder = ws.url(baseUrl + path).addHttpHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).addHttpHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method '$url'")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' '$url'")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    ): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq("Content-Type" -> "application/json; charset=UTF-8")
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw io.flow.google.places.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    final case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String

    }

  }



  package errors {

    final case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}