/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.4.90
 * apibuilder 0.14.3 app.apibuilder.io/flow/location/0.4.90/play_2_6_client
 */
package io.flow.location.v0.models {

  /**
   * A suggested address (usually providing more accurate information). This object
   * contains both the suggested address as well as metadata on which fields are
   * actually different
   * 
   * @param address The suggested address
   * @param streets True if the streets are updated; false otherwise
   * @param city True if the city is updated; false otherwise
   * @param province True if the province is updated; false otherwise
   * @param postal True if the postal is updated; false otherwise
   * @param country True if the country is updated; false otherwise
   */
  case class AddressSuggestion(
    address: io.flow.common.v0.models.Address,
    streets: Boolean,
    city: Boolean,
    province: Boolean,
    postal: Boolean,
    country: Boolean
  )

  /**
   * Address verification returns information on whether or not an address is valid
   * and deliverable - meaning carriers will accept this address. Also returns
   * suggestions for address correction, including data to highlight specific fields
   * to correct.
   * 
   * @param address The address we are verifying
   * @param valid True if the address is valid; false otherwise
   * @param suggestions Where available, we return a list of suggestions for verified addresses. Each
   *        suggestion contains both the suggested address as well as the specific fields
   *        that are different
   */
  case class AddressVerification(
    address: io.flow.common.v0.models.Address,
    valid: Boolean,
    suggestions: Seq[io.flow.location.v0.models.AddressSuggestion] = Nil
  )

  /**
   * Provides country level default settings for currency, language, etc.
   * 
   * @param country The ISO 3166-3 code for the country. Case insensitive. See
   *        https://api.flow.io/reference/countries
   * @param currency The default currency for this country as a ISO 4217 3 currency code as defined
   *        in https://api.flow.io/reference/currencies
   * @param language The default language for this country as a ISO 639 2 language code as defined in
   *        https://api.flow.io/reference/languages
   */
  case class CountryDefaults(
    country: String,
    currency: String,
    language: String
  )

}

package io.flow.location.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.location.v0.models.json._
    import io.flow.reference.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    private[v0] implicit val jsonReadsJodaLocalDate = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateParser
      dateParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate = new Writes[org.joda.time.LocalDate] {
      def writes(x: org.joda.time.LocalDate) = {
        import org.joda.time.format.ISODateTimeFormat.date
        val str = date.print(x)
        JsString(str)
      }
    }

    implicit def jsonReadsLocationAddressSuggestion: play.api.libs.json.Reads[AddressSuggestion] = {
      (
        (__ \ "address").read[io.flow.common.v0.models.Address] and
        (__ \ "streets").read[Boolean] and
        (__ \ "city").read[Boolean] and
        (__ \ "province").read[Boolean] and
        (__ \ "postal").read[Boolean] and
        (__ \ "country").read[Boolean]
      )(AddressSuggestion.apply _)
    }

    def jsObjectAddressSuggestion(obj: io.flow.location.v0.models.AddressSuggestion): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "address" -> io.flow.common.v0.models.json.jsObjectAddress(obj.address),
        "streets" -> play.api.libs.json.JsBoolean(obj.streets),
        "city" -> play.api.libs.json.JsBoolean(obj.city),
        "province" -> play.api.libs.json.JsBoolean(obj.province),
        "postal" -> play.api.libs.json.JsBoolean(obj.postal),
        "country" -> play.api.libs.json.JsBoolean(obj.country)
      )
    }

    implicit def jsonWritesLocationAddressSuggestion: play.api.libs.json.Writes[AddressSuggestion] = {
      new play.api.libs.json.Writes[io.flow.location.v0.models.AddressSuggestion] {
        def writes(obj: io.flow.location.v0.models.AddressSuggestion) = {
          jsObjectAddressSuggestion(obj)
        }
      }
    }

    implicit def jsonReadsLocationAddressVerification: play.api.libs.json.Reads[AddressVerification] = {
      (
        (__ \ "address").read[io.flow.common.v0.models.Address] and
        (__ \ "valid").read[Boolean] and
        (__ \ "suggestions").read[Seq[io.flow.location.v0.models.AddressSuggestion]]
      )(AddressVerification.apply _)
    }

    def jsObjectAddressVerification(obj: io.flow.location.v0.models.AddressVerification): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "address" -> io.flow.common.v0.models.json.jsObjectAddress(obj.address),
        "valid" -> play.api.libs.json.JsBoolean(obj.valid),
        "suggestions" -> play.api.libs.json.Json.toJson(obj.suggestions)
      )
    }

    implicit def jsonWritesLocationAddressVerification: play.api.libs.json.Writes[AddressVerification] = {
      new play.api.libs.json.Writes[io.flow.location.v0.models.AddressVerification] {
        def writes(obj: io.flow.location.v0.models.AddressVerification) = {
          jsObjectAddressVerification(obj)
        }
      }
    }

    implicit def jsonReadsLocationCountryDefaults: play.api.libs.json.Reads[CountryDefaults] = {
      (
        (__ \ "country").read[String] and
        (__ \ "currency").read[String] and
        (__ \ "language").read[String]
      )(CountryDefaults.apply _)
    }

    def jsObjectCountryDefaults(obj: io.flow.location.v0.models.CountryDefaults): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "country" -> play.api.libs.json.JsString(obj.country),
        "currency" -> play.api.libs.json.JsString(obj.currency),
        "language" -> play.api.libs.json.JsString(obj.language)
      )
    }

    implicit def jsonWritesLocationCountryDefaults: play.api.libs.json.Writes[CountryDefaults] = {
      new play.api.libs.json.Writes[io.flow.location.v0.models.CountryDefaults] {
        def writes(obj: io.flow.location.v0.models.CountryDefaults) = {
          jsObjectCountryDefaults(obj)
        }
      }
    }
  }
}

package io.flow.location.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      import org.joda.time.{format, DateTime, LocalDate}

      val dateTimeIso8601: ApibuilderTypeConverter[DateTime] = new ApibuilderTypeConverter[DateTime] {
        override def convert(value: String): DateTime = format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: DateTime): String = format.ISODateTimeFormat.dateTime.print(value)
        override def example: DateTime = DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[LocalDate] = new ApibuilderTypeConverter[LocalDate] {
        override def convert(value: String): LocalDate = format.ISODateTimeFormat.yearMonthDay.parseLocalDate(value)
        override def convert(value: LocalDate): String = value.toString
        override def example: LocalDate = LocalDate.now
      }

    }

    case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

    case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}


package io.flow.location.v0 {

  object Constants {

    val BaseUrl = "https://location.api.flow.io"
    val Namespace = "io.flow.location.v0"
    val UserAgent = "apibuilder 0.14.3 app.apibuilder.io/flow/location/0.4.90/play_2_6_client"
    val Version = "0.4.90"
    val VersionMajor = 0

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String = "https://location.api.flow.io",
    auth: scala.Option[io.flow.location.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.location.v0.models.json._
    import io.flow.reference.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.location.v0.Client")

    logger.info(s"Initializing io.flow.location.v0.Client for url $baseUrl")

    def addresses: Addresses = Addresses

    def countryDefaults: CountryDefaults = CountryDefaults

    def timezones: Timezones = Timezones

    object Addresses extends Addresses {
      override def get(
        address: _root_.scala.Option[String] = None,
        ip: _root_.scala.Option[String] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.common.v0.models.Address]] = {
        val queryParameters = Seq(
          address.map("address" -> _),
          ip.map("ip" -> _)
        ).flatten

        _executeRequest("GET", s"/addresses", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.location.v0.Client.parseJson("Seq[io.flow.common.v0.models.Address]", r, _.validate[Seq[io.flow.common.v0.models.Address]])
          case r if r.status == 401 => throw io.flow.location.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.location.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.location.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.location.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404, 422")
        }
      }

      override def postVerifications(
        address: io.flow.common.v0.models.Address,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.location.v0.models.AddressVerification] = {
        val payload = play.api.libs.json.Json.toJson(address)

        _executeRequest("POST", s"/addresses/verifications", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.location.v0.Client.parseJson("io.flow.location.v0.models.AddressVerification", r, _.validate[io.flow.location.v0.models.AddressVerification])
          case r if r.status == 401 => throw io.flow.location.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.location.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.location.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 422")
        }
      }
    }

    object CountryDefaults extends CountryDefaults {
      override def get(
        country: _root_.scala.Option[String] = None,
        address: _root_.scala.Option[String] = None,
        ip: _root_.scala.Option[String] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.location.v0.models.CountryDefaults]] = {
        val queryParameters = Seq(
          country.map("country" -> _),
          address.map("address" -> _),
          ip.map("ip" -> _)
        ).flatten

        _executeRequest("GET", s"/geolocation/defaults", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.location.v0.Client.parseJson("Seq[io.flow.location.v0.models.CountryDefaults]", r, _.validate[Seq[io.flow.location.v0.models.CountryDefaults]])
          case r if r.status == 401 => throw io.flow.location.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.location.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.location.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.location.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404, 422")
        }
      }

      override def getByCountry(
        country: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.location.v0.models.CountryDefaults] = {
        _executeRequest("GET", s"/geolocation/defaults/${play.utils.UriEncoding.encodePathSegment(country, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.location.v0.Client.parseJson("io.flow.location.v0.models.CountryDefaults", r, _.validate[io.flow.location.v0.models.CountryDefaults])
          case r if r.status == 401 => throw io.flow.location.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.location.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.location.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }
    }

    object Timezones extends Timezones {
      override def get(
        address: _root_.scala.Option[String] = None,
        ip: _root_.scala.Option[String] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.reference.v0.models.Timezone]] = {
        val queryParameters = Seq(
          address.map("address" -> _),
          ip.map("ip" -> _)
        ).flatten

        _executeRequest("GET", s"/geolocation/timezones", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.location.v0.Client.parseJson("Seq[io.flow.reference.v0.models.Timezone]", r, _.validate[Seq[io.flow.reference.v0.models.Timezone]])
          case r if r.status == 401 => throw io.flow.location.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.location.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.location.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.location.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404, 422")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {

      val holder = ws.url(baseUrl + path).addHttpHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).addHttpHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw io.flow.location.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def addresses: io.flow.location.v0.Addresses
      def countryDefaults: io.flow.location.v0.CountryDefaults
      def timezones: io.flow.location.v0.Timezones
    }

  }

  trait Addresses {
    /**
     * Geolocates the request based on the provided parameters, returning a list of
     * potential matching addresses.
     */
    def get(
      address: _root_.scala.Option[String] = None,
      ip: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.common.v0.models.Address]]

    def postVerifications(
      address: io.flow.common.v0.models.Address,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.location.v0.models.AddressVerification]
  }

  trait CountryDefaults {
    /**
     * @param country The ISO 3166 2 or 3 character code for the country. Case insensitive. See
     *        https://api.flow.io/reference/countries
     */
    def get(
      country: _root_.scala.Option[String] = None,
      address: _root_.scala.Option[String] = None,
      ip: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.location.v0.models.CountryDefaults]]

    /**
     * @param country The ISO 3166 2 or 3 character code for the country. Case insensitive. See
     *        https://api.flow.io/reference/countries
     */
    def getByCountry(
      country: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.location.v0.models.CountryDefaults]
  }

  trait Timezones {
    /**
     * Provides timezone based on address or geolocated IP.
     */
    def get(
      address: _root_.scala.Option[String] = None,
      ip: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.reference.v0.models.Timezone]]
  }

  package errors {

    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.location.v0.models.json._
    import io.flow.reference.v0.models.json._

    case class GenericErrorResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val genericError = _root_.io.flow.location.v0.Client.parseJson("io.flow.error.v0.models.GenericError", response, _.validate[io.flow.error.v0.models.GenericError])
    }

    case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}